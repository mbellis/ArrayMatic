% TRS_NEWPROJECT - Initiate a new project of transcriptomic analysis
% If the chip set used is composed of several chip, only one chip can be
% treated. A new project must be created for each chip.

% c) Michel Bellis
% CNRS
%michel.bellis@crmb.cnrs.fr
% arraymatic@gmail.com
% http://code.google.com/p/arraymatic
% distributed under the CeCILL license, which is compatible with the GNU General Public Licence and adapted to the European legislation.

% NO INPUT

% OUTPUT
% Fill P.chip with
% chipSetRank:
% chipRank:
% chipType:
% ProbeSetNb:
% CompName:
% Chromosomes:
% Success:

% EXTERNAL SOURCES

% Probe/Probe Set definitions
% If the chip set is proprietary or not available in ChipSet List, user
% must have a two columns tab delimited file : probe/probe set ID +
% gene ID or equivalent

% Experiment description
% Example of description file (tab delimited format) if raw data are in distinct files
% FileName  HeaderLine  PointName   ReplicateRank   BiolCond	BiolRank	status	sex	age
% CT052.txt 1           YF-052b 	1               YN           1
% N      F	Y
% CT053.txt 1           YM-053b     1               YN           1           N      M	Y
% CT054.txt 1           YM-054b     2               YN           1           N      M	Y
% CT008.txt 1           OF-008b     1               ON           2           N      F   0
% CT973.txt 1           AF-973a     1               OA           3           A      F	0
% The first six columns are mandatory. Extra columns indicates factors.
% Factors must be coded either by character or integer or float number.

% If raw data are in a single file the first column can contain anything :
% The first value of Headerline is used for import (no matter what are the
% following values)
% FileName  HeaderLine  PointName   ReplicateRank   BiolCond	BiolRank
% status	sex	age
% 0         1           YF-052b     1               YN           1
% N       F	Y
% etc ...

% Raw data in distincts files
% each file must be a two columns tab delimited file : probe/probe set ID +
% signal

% Raw data in a single file
% first line : eventually a header line as indicated in Experiment description file
% first column: probe/probe set ID
% following columns : values (signal) in the same order as indicated in the
% experiment description file
% OsAffx.17257.1.S1_at	5.706048	5.869222	6.008247

% MAIN CHANGES

%  2010 08 21 - Network analysis
%  2010 05 04- Refactoring existing version (2000-2010)
%                   Manage only simple transcription analysis

function trs_newproject()

global K P Data

P=[];
%% PROJECT INFO
%Select the chip set & eventually the chip if several chips exists in the
%same chip set model
[P.chip.chipRank,P.chip.chipPos,ChipType,Gpl,ProbeSetNb,CompName,Chromosomes,Success] =select_chipset;
if Success==0
    h=warndlg('chip set no selected , process canceled');
    waitfor(h)
else
    DirChoice=questdlg('For this new project do you want to','','use an existing directory','create a new directory','use an existing directory');
    if isequal(DirChoice,'create a new directory')
        [ProjectFullDir,ProjectDir,Success,ErrMessage]=create_dir('Select the parent directory where you want to create your project directory');
        if Success==0
            h=Errordlg('new project canceled');
            waitofr(h)
            error('new project canceled')
        end
    else
        ProjectFullDir=uigetdir('*.*','Select the directory you want to use for this project');
        if ischar(ProjectFullDir)
            [temp, ProjectDir,temp,temp] = fileparts(ProjectFullDir)
        else
            h=errordlg('Process canceled');
            waitfor(h)
            error('process canceled')
        end
    end

    ProjectName=inputdlg({'Enter the project name (can be different from project dir - spaces will be replaced by underscores)'},'',1,{ProjectDir});
    P.project.name=ProjectName{1};
    P.dir.project=ProjectFullDir;
    cd(ProjectFullDir)

    if exist(sprintf('%s.mat',P.project.name),'file')
        Continue=questdlg(sprintf('%s already exists. Do you want to continue (existing data will be owerwritten) ?',P.project.name),'','yes','no','yes');
        if isequal(Continue,'no')
            errordlg('process canceled')
            error('process canceled at 00')
        else
            %clear existing data
            rmdir(sprintf('%s_results',P.project.name),'s')
            rmdir(sprintf('%s_data',P.project.name),'s')
            delete(sprintf('%s.mat',P.project.name))
        end
    end

    %create Arraymatics directoris

    %directory containing data used by the program

    mkdir(sprintf('%s_data',P.project.name))
    cd(sprintf('%s_data',P.project.name))
    P.dir.data=pwd;
    cd(P.dir.project)

    %directory containing results generated by the program and that can be visualized by users (images,
    %tables ...)
    mkdir(sprintf('%s_results',P.project.name))
    cd(sprintf('%s_results',P.project.name))
    P.dir.results=pwd;
    %properties of points ...
    cd(P.dir.results)
    mkdir('prop')
    cd('prop')
    P.dir.resProp=pwd;
    %calibration curves
    cd(P.dir.results)
    mkdir('calib')
    cd('calib')
    P.dir.resCalib=pwd;
    %dendrograms of samples
    cd(P.dir.results)
    mkdir('tree')
    cd('tree')
    P.dir.resTree=pwd;
    %comparisons between points of groups of points
    cd(P.dir.results)
    mkdir('comp')
    cd('comp')
    P.dir.resComp=pwd;



    P.par.calibProg='fractile';        

    switch ChipType
        case 'T'
            AnalType=questdlg('What type of analysis is it ?','','Simple transcriptomic analysis','Network analysis','Simple transcriptomic analysis');
            if isequal(AnalType,'Network analysis')
                P.par.analType='network';
                DataTable=1;
                P.flag.loadData=1;
                cd(P.dir.data)
                RankFid=fopen('DataRanks.float32le','w+','ieee-le');
                if RankFid==0
                    h=errordlg('can''t create DataRanks.float32le');
                    waitfor(h)
                    error('process canceled')
                end
                P.flag.testAlgo=0;
            else
                P.par.analType='transcription';

                %ask for raw data format
                Answer=questdlg('Raw data organization','NEW PROJECT','single tab delimited file','several tab delimited file','single tab delimited file');
                if isequal(Answer,'single tab delimited file')
                    DataTable=1;
                else
                    DataTable=0;
                end
                %ask for  data loaded in memory
                Answer=questdlg('Data management ?','NEW PROJECT','Keep data in memory','Load data from disk','Keep data in memory');
                if isequal(Answer,'Load data from disk')
                    P.flag.loadData=1;
                    cd(P.dir.data)
                    RankFid=fopen('DataRanks.float32le','w+','ieee-le');
                    if RankFid==0
                        h=errordlg('can''t create DataRanks.float32le');
                        waitfor(h)
                        error('process canceled')
                    end
                    SignalFid=fopen('DataSignals.float32le','w+','ieee-le');
                    if SignalFid==0
                        h=errordlg('can''t create DataSignals.float32le');
                        waitfor(h)
                        error('process canceled')
                    end
                else
                    P.flag.loadData=0;
                end
                %ask for algorithm
                Answer=questdlg('Do you want to load the same data analyzed by different algorithms ?','NEW PROJECT','Yes','No','Yes');
                if isequal(Answer,'Yes')
                    P.flag.testAlgo=1;
                else
                    P.flag.testAlgo=0;
                end
            end

        case 'G'
            %ask for the type of analysis
            Answer=questdlg('Experiment format ?','Import of Raw Data','Transcription profiling','ChIP-chip','Yes');
            if isequal(Answer,'ChIP-chip')
                P.par.analType='chipchip';
            else
                P.par.analType='transcription';
            end
            %ask for  data loaded in memory
            Answer=questdlg('All data loaded in memory ?','Import of Raw Data','Yes','No','No');
            if isequal(Answer,'No')
                P.flag.loadData=1;
            else
                P.flag.loadData=0;
            end
            DataTable=0;
    end


    if ChipType=='G'
        switch CompName
            case 'affy'
                % !!! to be refactored
                [DFile,DFileDir]=AffyWriteData;
            case 'nimb'
                % !!! to be refactored
                [DFile,DFileDir]=NimbWriteData(ProbeSetNb);
        end
    end
%% EXPERIMENT INFO
if isequal(P.par.analType,'network')
    if ~isempty(Gpl)
        Success=geo_menucom('create new network',Gpl,RankFid);
        fclose(RankFid)
        if Success
            %write bmoc grid used to assign comparisons results to
            %the right bloc (due to the huge number of comparisons, they 
            %are written in bloc  of 100x100 =10 000 comparisons
            %for a chip with 50 000 probe sets that counts for a file of 2
            %Go in float 32 format
            %In general not all possible comparisons are made in  a bloc.
            BiolNb=P.biol.nb;
            ColNb=ceil(BiolNb/100);
            BlocGrid=zeros(ColNb,ColNb);
            BlocRank=0;
            for ColL=1:ColNb
                for LineL=1:ColL
                    BlocRank=BlocRank+1;
                    BlocGrid(LineL,ColL)=BlocRank;
                    BlocGrid(ColL,LineL)=BlocRank;
                end
            end
            P.net.blocGrid=uint16(BlocGrid);
            P.net.biolIndex=zeros(P.biol.nb,1);
            P.net.biolIndexes={};
            cd(P.dir.project)
            eval(sprintf('save %s P',P.project.name))
        end
        %P is set to empty in case of another import
        P=[];

    else
        h=errordlg('Can process only GEO GPL platforms');
        waitfor(h)
        error('process canceled')
    end
else
    Continue=1;
    Loop=1;
    while Continue
        if P.chip.chipRank==0
            [ProbeName,ProbeDir]=uigetfile('*.*','Select the file containing probe descriptions');
            cd(ProbeDir)
            [P.probeSet.name,P.probeSet.description]=textread(ProbeName,'%q%q','delimiter','\t');
            P.probeSet.selBindex=zeros(length(P.probeSet.name),1);
            P.probeSet.nb=length(P.probeSet.name);
        end
        if ChipType=='T'
            cd(ProjectFullDir)
            if Loop>1
                MemDFile=DFile;
                MemDFileDir=DFileDir;
            else
                MemDFile='';
                MemDFileDir='';
            end
            if P.flag.testAlgo
                if Loop==1
                    [DFile,DFileDir]=uigetfile('*.*','Select the file containing experiment description');
                else
                    DFile=MemDFile;
                    DFileDir=MemDFileDir;
                end
            else
                [DFile,DFileDir]=uigetfile('*.*','Select the file containing experiment description');
            end
            cd(DFileDir)
            if ~isequal(DFile,MemDFile)|~isequal(DFileDir,MemDFileDir)
                %recover field names
                fid=fopen(DFile,'r');
                FirstLine=fgetl(fid);
                SndLine=fgetl(fid);
                fclose(fid);
                TabPos1=find(FirstLine==char(9));
                TabPos2=find(SndLine==char(9));
                FieldNb=length(TabPos1)+1;
                if isequal(P.par.analType,'chipchip')
                    ExpOutPut='[FileName,HeaderLine,PointName,ReplicateRank,BiolName,BiolRank,ResType';
                    ExpDataType='%s%u%s%u%s%u%c';
                else
                    ExpOutPut='[FileName,HeaderLine,PointName,ReplicateRank,BiolName,BiolRank';
                    ExpDataType='%s%u%s%u%s%u';
                end
                %control that the field nb is right
                if isequal(P.par.analType,'chipchip')
                    MinFieldNb=7;
                else
                    MinFieldNb=6;
                end
                if FieldNb<MinFieldNb
                    h=msgbox(sprintf('first line is %s',FirstLine));
                    waitfor(h)
                    if isequal(P.par.analType,'chipchip')
                        h=msgdlg(sprintf('first line has less than %u mandatory fields (FileName, HeaderLine, PointName, ReplicateRank, BiolCond, BiolRank & ResType)',MinFieldNb));
                    else
                        h=msgdlg(sprintf('first line has less than %u mandatory fields (FileName, HeaderLine, PointName, ReplicateRank, BiolCond & BiolRank)',MinFieldNb));
                    end
                    waitfor(h)
                    errordlg('process canceled')
                    error('process canceled')
                    %eventually gather factor information
                elseif FieldNb>MinFieldNb
                    %add the final position in TabPos
                    TabPos1=[TabPos1,length(FirstLine)+1];
                    TabPos2=[TabPos2,length(SndLine)+1];
                    for FactorL=MinFieldNb:FieldNb-1
                        CurrFactor=FirstLine(TabPos1(FactorL)+1:TabPos1(FactorL+1)-1);
                        CurrFactorValue=SndLine(TabPos2(FactorL)+1:TabPos2(FactorL+1)-1);
                        Ok=0;
                        while Ok==0
                            if isequal(upper(CurrFactor),'TIME')|isequal(upper(CurrFactor),'DATE')
                                Factor=inputdlg({sprintf('edit the current factor (%s)',CurrFactorValue),sprintf('indicate the factor type (int,float,char,str) for %s',CurrFactorValue)},'',1,{CurrFactor,'str'});
                            else
                                IsNb=str2num(CurrFactorValue);
                                if isempty(IsNb)
                                    if length(CurrFactorValue)==1
                                        Factor=inputdlg({sprintf('edit the current factor (%s)',CurrFactorValue),'indicate the factor type (int,float,char,str) for %s'},'',1,{CurrFactor,'char'});
                                    else
                                        Factor=inputdlg({sprintf('edit the current factor (%s)',CurrFactorValue),'indicate the factor type (int,float,char,str) for %s'},'',1,{CurrFactor,'str'});
                                    end
                                else
                                    if round(IsNb)==IsNb
                                        Factor=inputdlg({sprintf('edit the current factor (%s)',CurrFactorValue),'indicate the factor type (int,float,char,str) for %s'},'',1,{CurrFactor,'int'});
                                    else
                                        Factor=inputdlg({sprintf('edit the current factor (%s)',CurrFactorValue),'indicate the factor type (int,float,char,str) for %s'},'',1,{CurrFactor,'float'});
                                    end

                                end
                            end
                            if ~isempty(Factor{1}) && (isequal(Factor{2},'int') || isequal(Factor{2},'float') || isequal(Factor{2},'char') || isequal(Factor{2},'str'))
                                Ok=1;
                            else
                                h=warndlg('factor must not be empty and type must be int, float, str or char');
                                waitfor(h)
                            end
                        end
                        if isfield(P,'point')
                            if isfield(P.point,'factorNames')
                                if Loop==1
                                    FactorPos=FactorL-MinFieldNb+1;
                                else
                                    if length(P.point.factorNames)~=FieldNb-MinFieldNb
                                        errordlg('all experiment description files must have the same number of factors. Process canceled')
                                        error('Process canceled 07')
                                    else
                                        FactorPos=strmatch(Factor{1},P.point.factorNames,'exact');
                                        if isempty(FactorPos)
                                            errordlg('all experiment description files must have the same factors. Process canceled')
                                            error('Process canceled 08')
                                        elseif FactorPos~=FactorL-MinFieldNb+1
                                            errordlg('all experiment description files must have the factors identically ordered. Process canceled')
                                            error('Process canceled 08')
                                        end
                                    end
                                end
                            else
                                if Loop==1
                                    FactorPos=FactorL-MinFieldNb+1;
                                else
                                    errordlg('all experiment description files must have the same number of factors. Process canceled')
                                    error('Process canceled 09')
                                end
                            end
                        else
                            FactorPos=FactorL-MinFieldNb+1;
                        end
                        if Loop==1
                            P.point.factorNames{FactorPos}=Factor{1};
                            P.point.factorTypes{FactorPos}=Factor{2};
                        end
                        ExpOutPut=[ExpOutPut,sprintf(',FactorValues{%u}',FactorL-MinFieldNb+1)];
                        switch Factor{2}
                            case 'int'
                                ExpDataType=[ExpDataType,'%u'];
                            case 'float'
                                ExpDataType=[ExpDataType,'%f'];
                            case 'char'
                                ExpDataType=[ExpDataType,'%c'];
                            case 'str'
                                ExpDataType=[ExpDataType,'%s'];
                        end
                    end
                end
                ExpOutPut=[ExpOutPut,']'];
            end
            %read experiment information file
            eval(sprintf('%s=textread(''%s'',''%s'',''delimiter'',''\t'',''headerlines'',1)',ExpOutPut,DFile,ExpDataType));
            if FieldNb>MinFieldNb
                if Loop==1
                    P.point.factorValues=FactorValues;
                else
                    for FactorL=1:length(P.point.factorNames)
                        P.point.factorValues{FactorL}=[P.point.factorValues{FactorL};FactorValues{FactorL}];
                    end
                end
            end
        end
%% LOAD DATA
        %load data
        if DataTable==1
            Msg='Select the file containing all raw data in tabular format';
        else
            Msg='Select a file containing raw data for any chip';
        end
        [TFileName,TDir]=uigetfile('*.*',Msg);
        cd(TDir)
        [temp,ExpName,temp,temp]=fileparts(TFileName);

        Answer=Inputdlg('Enter experiment name','',1,{ExpName});
        P.exp.name{Loop}=Answer{1};

        %recover information on biolconditions
        %if Loop>1
        BiolGrpOffset=0;
        if Loop>1
            BiolGrpOffset=max(P.point.biolRank);
        end

        %control BiolRank
        %either max(BiolRank)=length(unique(BiolRank))
        %=> put at the end of existing conditions
        if Loop==1
            BiolNames=cell(max(BiolRank),1);
            BiolRanks=unique(BiolRank);
            for BiolL=1:length(BiolRanks)
                Pos=find(BiolRank==BiolRanks(BiolL));
                BiolNames{BiolL,1}=BiolName{Pos(1)};
            end
        else
            if P.flag.testAlgo==0
                if max(BiolRank)==length(unique(BiolRank))
                    BiolRank=BiolRank+BiolGrpOffset;
                else
                    %or test if new values has not been yet used
                    if length(unique(P.point.biolRank))+length(unique(BiolRank))>length(unique([P.point.biolRank;BiolRank]))
                        h=warndlg(sprintf('Experiment % u :some Biol Ranks have been already used',Loop));
                        waitfor(h)
                        Action=questdlg('Do you want to','','let the program renumerate','cancel','cancel');
                        if isequal(Action,'cancel')
                            errordlg(sprintf('Process canceled. Renumerate BolRank in %s',DFile))
                            error('process canceled at 06')
                        else
                            NewBiolRank=zeros(size(BiolRank));
                            BiolRanks=unique(BiolRank);
                            for BiolL=1:length(BiolRanks)
                                Pos=find(BiolRank==BiolRanks(BiolL));
                                NewBiolRank(Pos)=BiolL;
                            end
                            BiolRank=NewBiolRank+BiolGrpOffset;
                        end
                    end
                end
                BiolRanks=unique(BiolRank);
                for BiolL=1:length(BiolRanks)
                    Pos=find(BiolRank==BiolRanks(BiolL));
                    BiolNames{BiolRanks(BiolL),1}=BiolName{Pos(1)};
                end
            end
        end

        PointNb=length(PointName);
        if  Loop==1
            PointOffset=0;
            P.point.name=PointName;
            P.point.replicateRank=ReplicateRank;
            P.point.biolRank=BiolRank;
            P.point.expRank=ones(PointNb,1);
            P.point.nb=length(P.point.name);
            P.point.currNb=P.point.nb;
            if isequal(P.par.analType,'chipchip')
                P.point.type=ResType;
            end
        else
            PointOffset=P.point.nb;
            for PointL=1:PointNb
                P.point.name{end+1,1}=PointName{PointL};
                P.point.replicateRank(end+1,1)=ReplicateRank(PointL);
                P.point.biolRank(end+1,1)=BiolRank(PointL);
                P.point.expRank(end+1,1)=Loop;
            end

            P.point.nb=length(P.point.name);
            P.point.currNb=P.point.nb;
        end
        P.exp.pointIndex{Loop,1}=[PointOffset+1:P.point.nb]';
        P.exp.nb=length(P.exp.name);




        if ChipType=='T'
            %Write signal in one Data variable
            switch CompName
                case {'affy','oth'}
                    if DataTable
                        cd(TDir)
                        fid = fopen(TFileName);
                        if fid~=-1
                            Output='[ProbeSet';
                            if P.flag.loadData
                                %load in memory only current experiment
                                %(assume that it is always possible)
                                DataSignals=[];
                                Output=strcat(Output,',DataSignals(:,1)');
                            else
                                Output=strcat(Output,sprintf(',DataSignals(:,%u)',PointOffset+1));
                            end
                            DataType='%s';
                            DataType=strcat(DataType,'%n');
                            if PointNb>=2
                                for PointL=2:PointNb
                                    if P.flag.loadData
                                        Output=strcat(Output,sprintf(',DataSignals(:,%u)',PointL));
                                    else
                                        Output=strcat(Output,sprintf(',DataSignals(:,%u)',PointOffset+PointL));
                                    end
                                    DataType=strcat(DataType,'%n');
                                end
                            end
                            Output=strcat(Output,']');
                            if isequal(P.par.analType,'chipchip')
                                eval(sprintf('%s=textread(TFileName,''%s'',''headerlines'',%u,''delimiter'',''\t'',''emptyvalue'',NaN);',Output,DataType,HeaderLine(1)));
                            else
                                eval(sprintf('%s=textread(TFileName,''%s'',''headerlines'',%u,''delimiter'',''\t'',''emptyvalue'',NaN);',Output,DataType,HeaderLine(1)));
                            end
                            fclose(fid);
                            %DETECT LOG VALUES
                            for PointL=1:PointNb
                                if P.flag.loadData
                                    if max(DataSignals(:,PointL))<20
                                        DataSignals(:,PointL)=2.^DataSignals(:,PointL);
                                    end
                                else
                                    if max(DataSignals(:,PointOffset+PointL))<20
                                        DataSignals(:,PointOffset+PointL)=2.^DataSignals(:,PointOffset+PointL);
                                    end
                                end
                            end
                            %VERIFY PROBE SET LIST
                            if Loop==1
                                ProbeSetList=ProbeSet;
                            else
                                if length(ProbeSet)~=length(ProbeSetList)
                                    errordlg(sprintf('Current Table has %u probe sets, but first table has %u. Process canceled',length(ProbeSet),length(ProbeSetList)));
                                    error('process canceled at 01')
                                else
                                    if sum(cellfun(@isequal,ProbeSet,ProbeSetList))~=length(ProbeSetList)
                                        %errordlg('Current Table has its probe set names in a different order. Process canceled');
                                        %error('process canceled at 02')
                                        %REORDER VALUES
                                        %find SortIndex
                                        FindAllFlag=1;
                                        [SortIndex,Temp]=find_sortorder(ProbeSetList,ProbeSet,'string',FindAllFlag);
                                        for PointL=1:PointNb
                                            if P.flag.loadData
                                                DataSignals(:,PointL)=DataSignals(SortIndex,PointL);
                                            else
                                                DataSignals(:,PointOffset+PointL)=DataSignals(SortIndex,PointOffset+PointL);
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    else
                        cd(TDir)
                        for PointL=1:PointNb
                            if P.flag.loadData
                                DataSignals=[];
                                Output='[ProbeSet,DataSignals]';
                            else
                                Output=sprintf('[ProbeSet,DataSignals(:,%u)]',PointOffset+PointL);
                            end
                            eval(sprintf('%s=textread(FileName{PointL},''%%s%%n'',''headerlines'',%u,''delimiter'',''\t'');',Output,HeaderLine(PointL)));
                            if Loop==1 && PointL==1
                                ProbeSetList=ProbeSet;
                            else
                                if length(ProbeSet)~=length(ProbeSetList)
                                    errordlg(sprintf('Current point has %u probe sets, but first point has %u. Process canceled',length(ProbeSet),length(ProbeSetList)));
                                    error('process canceled at 01')
                                else
                                    if sum(cellfun(@isequal,ProbeSet,ProbeSetList))~=length(ProbeSetList)
                                        %REORDER VALUES
                                        %find SortIndex
                                        FindAllFlag=1;
                                        [SortIndex,Temp]=find_sortorder(ProbeSetList,ProbeSet,FindAllFlag);
                                        if P.flag.loadData
                                            DataSignals=DataSignals(SortIndex);
                                        else
                                            DataSignals(:,PointOffset+PointL)=DataSignals(SortIndex,PointOffset+PointL);
                                        end
                                    end
                                end
                            end

                        end
                    end
                    %save data if necessary
                    if P.flag.loadData
                        %VERIFY GLOBAL SIZE
                        if size(DataSignals,1)~=ProbeSetNb
                            fclose(RankFid)
                            fclose(SignalFid)
                            h=errordlg(sprintf('imported table has %u lines and chip %s is supposed to have %u lines',size(DataSignals,1),K.chipSet.name{P.chip.chipPos},ProbeSetNb));
                            waitfor(h);
                            error('process canceled')
                        else
                            %COUNT THE NB OF > VALUES
                            PosNb=zeros(size(DataSignals,2),1);
                            for DataL=1:size(DataSignals,2)
                                PosNb(DataL)=length(find(DataSignals(:,DataL)));
                            end
                            if length(find(PosNb~=ProbeSetNb))
                                h=warndlg(sprintf('%u signals upon %u are <=0',length(find(PosNb~=ProbeSetNb)),ProbeSetNb));
                                waitfor(h)
                            end
                            cd(P.dir.data)
                            Success=save_data(DataSignals,SignalFid,[],'a','single','ieee-le');
                            if Success==0
                                h=errordlg('Data not saved. Process canceled');
                                waitfor(h)
                                error('process canceled')
                            end
                        end
                        DataSignals=[];
                    end
                    
                        
                        
                        
                        
                    if ChipType=='T'
                        % !!! to be done : allowing a different algorithm for each point
                        AlgoType=Inputdlg('Enter analysis algorithm for all points (MAS3, MAS4, MAS5, DCHIP, RMA, GC-RMA, PLIER, PPDN, RDN, ABI, NIMB, TAS, NIMB, AGIL GENEPIX)','',1);
                        AlgoType=AlgoType{1};
                        if isequal(AlgoType,'MAS3')||isequal(AlgoType,'MAS4')
                            AlgoGrp=1;
                        else
                            AlgoGrp=2;
                        end
                        for PointL=1:PointNb
                            P.point.algo{PointOffset+PointL,1}=AlgoType;
                            P.point.algoGrp(PointOffset+PointL,1)=AlgoGrp;
                        end
                    end
                case 'AGIL'
                    % !!! to be refactored
                    SignalList={'gProcessedSignal';'gProcessedSigError';'gMeanSignal';'gMedianSignal';'gBGSubSignal';'gBGSubSigError';'gNetSignal';'gInterpolatedNegCtrlSub'};
                    SignalTypeRank=listdlg('ListString',SignalList,'SelectionMode','single','PromptString','Select the signal type to be used');
                    SignalType=SignalList{SignalTypeRank};

                    for PointL=1:P.point.nb
                        sprintf('verify %s (nb %u)',FileName{PointL},PointL)
                        cd(DFileDir)
                        InFid=fopen(FileName{PointL},'r');
                        if InFid==-1
                            h=errordlg(sprintf('%s: FEATURES missing',FileName{PointL}));
                            waitfor(h)
                            error('process canceled')
                        else
                            fclose(InFid)
                        end
                    end

                    for PointL=1:P.point.nb
                        sprintf('treat %s (nb %u)',FileName{PointL},PointL)
                        cd(DFileDir)
                        InFid=fopen(FileName{PointL},'r');
                        CurrLine='';
                        Go1=1;
                        Abort=0;
                        SkipNb=0;
                        while Go1==1
                            CurrLine=fgetl(InFid);
                            SkipNb=SkipNb+1;
                            if ~ischar(CurrLine)
                                Abort=1;
                                fprintf('%s: FEATURES missing',FileName{PointL});
                                break
                            else
                                if length(CurrLine)>=8
                                    if isequal(upper(CurrLine(1:8)),'FEATURES')
                                        break
                                    end
                                end
                            end
                        end
                        TabPos=findstr(CurrLine,char(09));
                        TabNb=length(TabPos);
                        FieldPos=findstr(CurrLine,SignalType);
                        if ~isempty(FieldPos)
                            FirstTabPos=find(TabPos<FieldPos);
                            FirstTabPos=FirstTabPos(end);
                        else
                            h=errordlg(sprintf('%s does not exists',SignalType));
                            waitfor(h);
                            error('canceled')
                        end
                        fclose(InFid)
                        if Abort==0
                            %recover MeanSignal
                            Output=sprintf('[t,Rank,XPos,YPos,%sCurrResult%s]',repmat('t,',1,FirstTabPos-4),repmat(',t',1,TabNb-FirstTabPos));
                            eval([Output,'=textread(FileName{PointL},''%s%u%u%u',repmat('%s',1,FirstTabPos-4),'%n',repmat('%s',1,TabNb-FirstTabPos),''',''delimiter'',''\t'',''headerlines'',',num2str(SkipNb),');']);
                        end
                        Data{PointL+PointOffset}.signal=CurrResult;
                    end
            end



        end

        Answer=questdlg('Do you want to load other data ?','Analysis of Raw Data','Yes','No','No');
        if isequal(Answer,'No')
            Continue=0;
            %VERIFY POINT NAMES
            Id={};
            PointDoublonNb=0;
            for i=1:length(P.point.nb)
                CurrId=sprintf('%s_r%u',P.point.name{i},P.point.replicateRank(i));
                if ~isempty(strmatch(CurrId,Id,'exact'))
                    PointDoublonNb=PointDoublonNb+1;
                    h=warndlg(sprintf('point %s with replicate rank %u is a doublon',P.point.name{i},P.point.replicateRank(i)));
                    waitfor(h)
                else
                    Id{end+1}=CurrId;
                end
            end
            %VERIFY BIOLCOND
            Id={};
            BiolDoublonNb=0;
            for i=1:length(P.point.nb)
                CurrId=sprintf('%s_r%u',BiolName{i},P.point.replicateRank(i));
                if ~isempty(strmatch(CurrId,Id,'exact'))
                    BiolDoublonNb=BiolDoublonNb+1;
                    h=warndlg(sprintf('biol name %s with replicate rank %u is a doublon',BiolName{i},P.point.replicateRank(i)));
                    waitfor(h)
                else
                    Id{end+1}=CurrId;
                end
            end
            if P.flag.loadData==0
                %VERIFY GLOBAL SIZE
                if size(DataSignals,1)~=ProbeSetNb
                    h=warndlg(sprintf('imported table has %u lines and chip %s is supposed to have %u lines',size(DataSignals,1),K.chipSet.name{P.chip.chipPos},ProbeSetNb));
                    waitfor(h);
                end
                %COUNT THE NB OF > VALUES
                PosNb=zeros(size(DataSignals,2),1);
                for DataL=1:size(DataSignals,2)
                    PosNb(DataL)=length(find(DataSignals(:,DataL)));
                end
                if length(find(PosNb~=size(DataSignals,1)))
                    h=warndlg(sprintf('%u points have signals <=0',length(find(PosNb~=ProbeSetNb))));
                    waitfor(h)
                end
                P.chip.currProbeSetNb=size(DataSignals,1);
            else
                P.chip.currProbeSetNb=ProbeSetNb;
            end
        else
            Loop=Loop+1;
            cd(TDir)
        end
    end

%% BIOL COND - PCA
    if PointDoublonNb>0 | BiolDoublonNb>0
        h=warndlg(sprintf('exist %u point doublons and %u biol name doublons => edit experiment description files and start again importation',PointDoublonNb,BiolDoublonNb));
        waitfor(h)
    else

        P.chip.probeSetNb=ProbeSetNb;
        P.chip.probeSetIds=ProbeSetList;

        % !!! to be refactored
        %nimblegene
        %         if isequal(AlgoType,'NIMB')
        %             [File,Dir]=uigetfile('*.*','Select the file of duplicated probe');
        %             if ischar(File)
        %                 cd(Dir)
        %                 RepRank=load(File);
        %                 Start=ChipLimit(1);
        %                 P.chip.dupProbeIndex=RepRank(:)-Start;
        %                 clear RepRank
        %             else
        %                 P.chip.dupProbeIndex=[];
        %             end
        %             [File,Dir]=uigetfile('*.*','Select the file of random probe');
        %             if ischar(File)
        %                 cd(Dir)
        %                 RandRank=load(File);
        %
        %                 Start=ChipLimit(1);
        %                 End=ChipLimit(2);
        %                 ChipIndex=find(RandRank>=Start&RandRank<=End);
        %                 P.chip.randProbeIndex=RandRank(ChipIndex)-Start;
        %
        %                 clear RandRank
        %             else
        %                 P.chip.randProbeIndex=[];
        %             end
        %
        %
        %             [File,Dir]=uigetfile('*.ndf','Select the ndf file');
        %             cd(Dir)
        %             [Temp,Temp,Temp,Sel,Loc,Temp,Temp,Temp,Temp,Temp,Temp,Temp,Temp,MapPos,Temp,XPos,YPos]=textread(File,'%s%s%s%s%s%s%s%s%s%s%s%s%s%u%s%u%u','delimiter','\t','headerlines',1);
        %             clear Temp
        %
        %             Localisation=zeros(length(Loc),1);
        %             for LocL=1:length(P.chip.localisation)
        %                 Pos=strmatch(P.chip.localisation{LocL},Loc,'exact');
        %                 length(Pos)
        %                 Localisation(Pos)=LocL;
        %             end
        %             NullPos=find(Localisation==0);
        %             Localisation(NullPos)=[];
        %             XPos(NullPos)=[];
        %             YPos(NullPos)=[];
        %             MapPos(NullPos)=[];
        %             clear Loc
        %             Key=[num2str(XPos,'%04u'),num2str(YPos,'%04u')];
        %             Key=str2num(Key);
        %             [Key,SortIndex]=sort(Key);
        %             clear Key
        %             P.chip.xPos=XPos(SortIndex);
        %             P.chip.yPos=YPos(SortIndex);
        %             P.chip.loc=Localisation(SortIndex);
        %             P.chip.mapPos=MapPos(SortIndex);
        %             clear XPos YPos Localisation Probe Temp MapPos
        %
        %         else
        %             P.chip.randProbeIndex=[];
        %             P.chip.dupProbeIndex=[];
        %         end



        % edit data



        'Treat Biol Condition (reorder and renumerate)'
        if isfield(P.point,'biolRank')
            BiolRankNb=length(unique(P.point.biolRank));
            LastBiolRank=max(P.point.biolRank);
            if BiolRankNb<LastBiolRank
                %renumerate
                CurrBiolRank=1;
                for BiolL=1:LastBiolRank
                    Pos=find(P.point.biolRank==BiolL);
                    if ~isempty(Pos)
                        P.point.biolRank(Pos)=CurrBiolRank;
                        P.point.biolRank
                        CurrBiolRank=CurrBiolRank+1;
                    end
                end
                %eliminate empty biol condition names
                for BiolL=LastBiolRank:-1:1
                    if isempty(BiolNames{BiolL})
                        BiolNames(BiolL)=[];
                    end
                end
            elseif BiolRankNb>LastBiolRank
                errordlg('somtehing wrong in control of biol ranks')
                error('process canceled')
            end
        end
        P.biol.name=BiolNames;
        for BiolL=1:max(P.point.biolRank)
            Pos=find(P.point.biolRank==BiolL);
            P.biol.pointIndex{BiolL,1}=Pos;
        end
        P.biol.used=ones(length(P.biol.name),1);
        P.biol.nb=length(P.biol.name);
        
        

        % PCA DISPLAY
        Continue=1;
        if P.flag.loadData
            [DataSignals,Success]=load_data(SignalFid,[],P.chip.currProbeSetNb,P.point.nb,'single','ieee-le');
            DataSignals=double(DataSignals);
            if Success==0
                Continue=0;
                h=warndlg('PCA can''t be used because Signals don''t fit in the available memory');
                waitfor(h)
            end
        end
        if Continue
            %display signals
            
            h=figure;
            hold on
            set(h,'name',sprintf('RAW SIGNALS of %s',P.project.name))
            %set legend
            if P.flag.testAlgo                
                Algos=unique(P.point.algo);
                AlgoNb=length(Algos);
                Colors=colors(colormap,AlgoNb);
                Legend={P.point.algo{1}};
                plot(0,0,'color',Colors(1,:))
                AlgoRank=1;
                for PointL=1:P.point.nb
                    if isempty(strmatch(P.point.algo{PointL},Legend,'exact'))
                        Legend{end+1}=P.point.algo{PointL};
                        AlgoRank=AlgoRank+1;
                        plot(0,0,'color',Colors(AlgoRank,:))
                    end                
                end
                legend(Legend,'location','SouthEast')
            else
                BiolNb=P.biol.nb;
                Colors=colors(colormap,BiolNb);
                Legend={P.biol.name{P.point.biolRank(1)}};
                plot(0,0,'color',Colors(1,:))
                BiolRank=1;
                for PointL=1:P.point.nb
                    if isempty(strmatch(P.biol.name{P.point.biolRank(PointL)},Legend,'exact'))
                        Legend{end+1}=P.biol.name{P.point.biolRank(PointL)};
                        BiolRank=BiolRank+1;
                        plot(0,0,'color',Colors(BiolRank,:))
                    end                
                end
                legend(Legend,'location','SouthEast')                
            end
            for PointL=1:size(DataSignals,2)
                if P.flag.testAlgo
                    LegendPos=strmatch(P.point.algo{PointL},Legend,'exact');
                else
                    LegendPos=strmatch(P.biol.name{P.point.biolRank(PointL)},Legend,'exact');
                end
                plot(1:ProbeSetNb,log2(sort(DataSignals(:,PointL))),'color',Colors(LegendPos,:))                
            end
            set(gca,'box','on')
            set(gcf,'color',[1,1,1])
            ylabel('log2(signal)')
            xlabel('ordered signals')
            set_figsize('1024px')
            cd(P.dir.resCalib)            
            saveas(h,sprintf('rawsignals_%s_%s',P.project.name,date),'png')            
            pca(DataSignals)                      
            if P.flag.loadData
                DataSignals=[];
            end
            
        end

        %batchlabels=[ones(1,10),ones(1,8)*-1];
        %DataLog2SignalCorr =
        %BatchAdjustSM(DataLog2Signal,batchlabels,paramstruct);
%% RANK - SAVE
        if ChipType=='T'
            P.point.used=ones(P.point.nb,1);
            P.point.minSignal=zeros(P.point.nb,1);
            P.point.maxSignal=zeros(P.point.nb,1);
            P.point.nanNb=zeros(P.point.nb,1);
            P.point.negNb=zeros(P.point.nb,1);
            P.point.nullNb=zeros(P.point.nb,1);
            P.point.threshNb=zeros(P.point.nb,1);
            P.point.threshVal=zeros(P.point.nb,1);
            P.point.negThreshNb=zeros(P.point.nb,1);
            P.point.nullDiffNb=zeros(P.point.nb,1);
            P.point.runNb=zeros(P.point.nb,1);
            P.point.negRunNb=zeros(P.point.nb,1);
            P.point.runVal=zeros(P.point.nb,1);
            P.point.diversity=zeros(P.point.nb,1);


            
            
            if P.flag.loadData==0
  
                %calculate Ranks
                DataRanks=zeros(size(DataSignals));
                for PointL=1:P.point.nb
                    try
                    trs_pointproperties(DataSignals(:,PointL),PointL)
                    catch
                        'stop'
                    end
                    [DataRanks(:,PointL),Success]=signal2rank(DataSignals(:,PointL),0,1,P.point.threshVal(PointL));
                end

                %save DataRanks
                cd(P.dir.data)
                Success=save_data(DataRanks,'DataRanks.float32le',P.dir.data,'w','single','ieee-le');
                if Success==0
                    errordlg('DataRanks not saved. Process canceled')
                    error('process canceled at 04')
                end
                cd(P.dir.data)
                Success=save_data(DataSignals,'DataSignals.float32le',P.dir.data,'w','single','ieee-le');
                if Success==0
                    errordlg('DataSignals not saved. Process canceled')
                    error('process canceled at 05')
                end
                % calculate RefRank and RefSignal for normalized signal interpolation from
                % rank
                for PointL=1:P.point.nb
                    if (P.point.minSignal(PointL)>0&&P.point.runNb(PointL)==0)||PointL==P.point.nb                      
                        [P.chip.refRank,P.chip.refSignal]=RefChip(DataSignals(:,PointL));
                        break
                    end
                end
                clear DataSignals
                clear DataRanks
            else
                FoundRef=0;
                for PointL=1:P.point.nb                    
                    [DataSignals,Success]=load_data(SignalFid,[],P.chip.currProbeSetNb,P.point.nb,'single','ieee-le',[],PointL);
                    if Success
                        trs_pointproperties(DataSignals,PointL)
                        [DataRanks,Success]=signal2rank(DataSignals,0,1,P.point.threshVal(PointL));
                        if FoundRef==0
                            if (P.point.minSignal(PointL)>0&&P.point.runNb(PointL)==0)||PointL==P.point.nb
                                FoundRef=1;
                                [P.chip.refRank,P.chip.refSignal]=RefChip(DataSignals);
                            end                            
                        end                        
                        if Success
                            Success=save_data(DataRanks,RankFid,[],'a','single','ieee-le');
                            if Success==0
                                errordlg('DataRankss not saved. Process canceled')
                                error('process canceled at 06')
                            end

                        else
                            fclose(RankFid)
                            fclose(SignalFid)
                            h=errordlg(sprintf('can''t save DataRank %u',PointL));
                            waitfor(h)
                            error('process canceled at 07')
                        end
                    else
                        fclose(RankFid)
                        fclose(SignalFid)
                        h=errordlg(sprintf('can''t load Datasignal %u',PointL));
                        waitfor(h)
                        error('process canceled at 08')
                    end
                end
                fclose(RankFid)
                fclose(SignalFid)
            end
        end

        cd(P.dir.project)
        eval(sprintf('save %s P',P.project.name))
        %P is set to empty in case of another import
        P=[];
    end
end

end %is isequal(P.par.analType,'network')